import time
import pymodbus
from pymodbus.client import ModbusSerialClient as ModbusClient
from pymodbus.exceptions import ModbusIOException
from pymodbus.transaction import ModbusRtuFramer

from pymodbus.register_read_message import ReadHoldingRegistersRequest



uch_crchi = 0xff
uch_crclow = 0xff

auch_crchi = [
        0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
        0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
        0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
        0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
        0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81,
        0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
        0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01,
        0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
        0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
        0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
        0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
        0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
        0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
        0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
        0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01,
        0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
        0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
        0x40
    ]
auch_crclow = [
        0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, 0x07, 0xC7, 0x05, 0xC5, 0xC4, 
        0x04, 0xCC, 0x0C, 0x0D, 0xCD, 0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09, 
        0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A, 0x1E, 0xDE, 0xDF, 0x1F, 0xDD, 
        0x1D, 0x1C, 0xDC, 0x14, 0xD4, 0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3, 
        0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3, 0xF2, 0x32, 0x36, 0xF6, 0xF7, 
        0x37, 0xF5, 0x35, 0x34, 0xF4, 0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A, 
        0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8, 0xE9, 0x29, 0xEB, 0x2B, 0x2A, 0xEA, 0xEE, 
        0x2E, 0x2F, 0xEF, 0x2D, 0xED, 0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26, 
        0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60, 0x61, 0xA1, 0x63, 0xA3, 0xA2, 
        0x62, 0x66, 0xA6, 0xA7, 0x67, 0xA5, 0x65, 0x64, 0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F, 
        0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68, 0x78, 0xB8, 0xB9, 0x79, 0xBB, 
        0x7B, 0x7A, 0xBA, 0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5, 
        0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0, 0x50, 0x90, 0x91, 
        0x51, 0x93, 0x53, 0x52, 0x92, 0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C, 
        0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98, 0x88, 
        0x48, 0x49, 0x89, 0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C, 
        0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80, 
        0x40 
    ]

def crc16_temp(data):
    global uch_crchi, uch_crclow, auch_crchi, auch_crclow
    uch_crchi = 0xFF
    uch_crclow = 0xFF
    for i in range(len(data)):
        uindex = uch_crchi ^ data[i]
        uch_crchi = auch_crchi[uindex]
        uch_crclow = auch_crclow[uindex]
    return (uch_crchi << 8) | uch_crclow


def get_short_from_big_endian_array(data, start_index):
    if len(data) >= start_index + 2:
        bytes_ = data[start_index:start_index + 2][::-1]
        return int.from_bytes(bytes_, byteorder='big', signed=True)
    return 0


def get_int_from_big_endian_array(data, start_index):
    if len(data) >= start_index + 4:
        bytes_ = data[start_index:start_index + 4][::-1]
        return int.from_bytes(bytes_, byteorder='big', signed=True)
    return 0


client = None

def read_temperature_crc(slave_id):
    global client
    
    if client.connect():
        try:

            # 创建请求
            request = pymodbus.register_read_message.ReadHoldingRegistersRequest(slave_id=slave_id, address=0x0002, count=2)
            request_encoded = request.encode()
            request_encoded =  b'\x03\x03\x00\x00\x00\x02'
            print(request_encoded)
            # 计算CRC校验码
            crc = crc16_temp(request_encoded)
            print(crc.to_bytes(2, byteorder='big'))
            request_with_crc = request_encoded + crc.to_bytes(2, byteorder='big')
            
            # 构建完整的请求帧
            request_pdu = request_with_crc
            #request_pdu = b'\x00\x06' + request_encoded + crc.to_bytes(2, byteorder='big')
            
           # print(request_pdu)

            request_pdu=b'\x03\x03\x00\x02\x00\x02\x64\x29'

            print(request_pdu)

            # 发送请求帧
            client.send(request_pdu)
            
            # 接收响应帧
            response_pdu = client.recv(1024)
            
            # 解析响应帧
            if len(response_pdu) >= 8:
                response_pdu = response_pdu[1:-2]  # 去掉事务标识符和CRC
                response = pymodbus.register_read_message.ReadHoldingRegistersResponse.decode(response_pdu)
                
                if not response.isError():
                    # 低地址为低 16 位，高地址为高 16 位
                    low_word = response.registers[0]
                    high_word = response.registers[1]
                    temperature = (high_word << 16) | low_word
                    return temperature / 100.0
                else:
                    print(f"Error reading holding registers: {response}")
            else:
                print("Received response is too short.")
        finally:
            client.close()
    else:
        print("Failed to connect to the Modbus RTU device.")


def main():

    global client
    serial_port = '/dev/serialTempreMem'  # 更改为你的串口号
    slave_id = 3  # 从站ID
    
    client = ModbusClient(method='rtu', port=serial_port, stopbits=1, bytesize=8, parity='N', baudrate=57600, timeout=1)
    if client!=None:
        print("temp client is openned!")

    
    while True:
        temperature = read_temperature_crc(slave_id)
        if temperature is not None:
            print(f"Infrared target temperature: {temperature:.2f} °C")
        time.sleep(0.1)  # 每隔1秒读取一次

if __name__ == '__main__':
    main()